webpackJsonp([9],{38:function(n,r,e){var t=e(0)(null,e(83),null,null);n.exports=t.exports},83:function(n,r){n.exports={render:function(){var n=this,r=n.$createElement;n._self._c;return n._m(0)},staticRenderFns:[function(){var n=this,r=n.$createElement,e=n._self._c||r;return e("div",[e("div",{staticClass:"title"},[n._v("\r\n        python入门（三）\r\n    ")]),n._v(" "),e("div",{staticClass:"tag"},[n._v("\r\n        python\r\n    ")]),n._v(" "),e("summary",[n._v("Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。")]),n._v(" "),e("h3",[n._v("1. 元祖(Turples)")]),n._v(" "),e("p",[n._v("元组是由一些列可以由不同数据结构组成的数据列表,元组元素不可更改")]),n._v(" "),e("pre",[n._v('\r\n        empty = () #空元组\r\n        single = (1,) #单值元组,注意结尾逗号,否则python会认为()为运算括号\r\n\r\n        turples = "hello","world",1,2 #多值元组\r\n        turples = ("hello","world",1,2) #多值元组\r\n        #以上两种写法是等价的\r\n    ')]),n._v(" "),e("h3",[n._v("2. 集合(Sets)")]),n._v(" "),e("p",[n._v("集合中元素没有顺序且不会重复,其基本用途主要成员测试或者消除重复条目。集合对象还支持并集、 交集、 差和对称差等数学运算。")]),n._v(" "),e("h3",[n._v("3.如何创建集合")]),n._v(" "),e("p",[e("strong",[n._v("1. ")]),n._v("直接用{},并且必须直接赋值,如果不直接赋值则创建的是空的字典")]),n._v(" "),e("pre",[n._v("\r\n        furit = {'apple','banana','orange'}\r\n\r\n        # 如果初始值有重复的,其再创建的时候会自动去重\r\n\r\n        >>>furit = {'apple','banana','orange','apple'}\r\n        >>>print(furit)\r\n        {'apple','banana','orange'}\r\n    ")]),n._v(" "),e("p",[e("strong",[n._v("2. ")]),n._v("用set()函数创建,且只能用set()函数来创建空的集合")]),n._v(" "),e("pre",[n._v("\r\n        >>>a = set('abracadabra')\r\n        >>>print(a)\r\n        {'a', 'd', 'c', 'b', 'r'}\r\n        >>>c = set()\r\n        >>>print(type(c))\r\n        "),n._v(" 'set'>\r\n        >>>d = ()\r\n        >>>print(type(d))\r\n        "),n._v(" 'tuple'>\r\n    ")]),n._v(" "),e("p",[n._v("set函数只支持传递一个参数,否则报错")]),n._v(" "),e("pre",[n._v("\r\n        >>>e = set(\"apple\",'banana')\r\n        >>>print(e)\r\n        TypeError: set expected at most 1 arguments, got 2\r\n    ")]),n._v(" "),e("p",[n._v("如果需要创建多个值,而非跟a一样的分散的单个字母,可以这样创建")]),n._v(" "),e("pre",[n._v("\r\n        >>>f = set(['apple','banana'])\r\n        >>>print(f)\r\n        {'apple','banana'}\r\n    ")]),n._v(" "),e("p",[e("span",{staticClass:"warnning"},[n._v("集合所有值都是无序的,若要对其进行排序,可以先换成list类型")])]),n._v(" "),e("h3",[n._v("3. 字典")]),n._v(" "),e("p",[n._v("键值对集合,任意不可变的类型都可以作为键。用{}创建字典类型")]),n._v(" "),e("pre",[n._v("\r\n        >>>dist = {'jack':'1992','rose':'1988'}\r\n        >>>print(dist['jack']) #只能用这样的方式取值\r\n        1992\r\n\r\n        #如果没有这个键则会创建一个新的键值对,否则则会修改值\r\n        >>>dist['allen']='1996'\r\n        >>>print(dist)\r\n        {'jack':'1992','rose':'1988','allen':'1996'}\r\n\r\n        >>>del(dist['jack'])\r\n        >>>pritn(dist)\r\n        {'rose':'1988','allen':'1996'}\r\n\r\n        >>>print('rose' in dist)\r\n        true\r\n        >>>print('rose' not in dist)\r\n        false\r\n    ")]),n._v(" "),e("p",[n._v("dict()构造函数直接从键-值对序列创建字典")]),n._v(" "),e("pre",[n._v("\r\n        >>>dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\r\n        {'sape': 4139, 'jack': 4098, 'guido': 4127}\r\n    ")]),n._v(" "),e("p",[n._v("如果键都是简单的字符串，有时通过关键字参数指定 键-值 对更为方便")]),n._v(" "),e("pre",[n._v("\r\n        >>>dict(sape=4139, guido=4127, jack=4098)\r\n        {'sape': 4139, 'jack': 4098, 'guido': 4127}\r\n    ")]),n._v(" "),e("p",[n._v("此外，字典推导式式可以用于从任意键和值表达式创建字典：")]),n._v(" "),e("pre",[n._v("\r\n        >>> {x: x**2 for x in (2, 4, 6)}\r\n        {2: 4, 4: 16, 6: 36}\r\n    ")])])}]}}});
//# sourceMappingURL=9.a13928958fa598673968.js.map