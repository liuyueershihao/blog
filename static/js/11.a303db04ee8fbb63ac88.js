webpackJsonp([11],{36:function(n,e,t){var i=t(0)(null,t(81),null,null);n.exports=i.exports},81:function(n,e){n.exports={render:function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},staticRenderFns:[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",[t("div",{staticClass:"title"},[n._v("python入门(一)")]),n._v(" "),t("div",{staticClass:"tag"},[n._v("python")]),n._v(" "),t("summary",[n._v("Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。")]),n._v(" "),t("h3",[n._v("1. 数字")]),n._v(" "),t("p",[n._v("\n        整型(int)、浮点型(float)和复数(complex)\n    ")]),n._v(" "),t("pre",[n._v("\n        >>>1 + 2\n        3\n        >>>2 - 1\n        1\n        >>>2 * 2\n        4\n        >>>4 / 2 #除法结果一定是float\n        2.0\n        >>>12 // 5 #取商\n        2\n        >>>6 % 5 #取余\n        1\n        >>>6 ** 2 #6的平方\n        36\n        >>>int(6.5) #float转int\n        6\n        >>>float(6) #int转float\n        6.0\n    ")]),n._v(" "),t("h3",[n._v("2. 字符串")]),n._v(" "),t("p",[n._v('字符串变量一旦被定义，不可更改,单行字符串表示:\'\'、"",多行字符串表示:``` ```、""" """')]),n._v(" "),t("pre",[n._v("\n        >>>'a' + 'b'\n        'ab'\n        >>>\"a\" * 3\n        'aaa'\n        >>>s = \"abcde\"\n        >>>s[0]\n        \"a\"\n        >>>s[-1]\n        'e'\n        >>>s[0:2] #不包含结束位置下标\n        \"ab\"\n        >>>s[2:]\n        \"cde\"\n        >>>s[:-2] #不包含结束位置下标\n        \"abc\"\n        >>>s[0] = \"f\" #字符串不可更改\n        TypeError: 'str' object does not support item assignment\n        >>>len(s) #返回字符串长度\n        5\n        >>>print 'c:\\some\\name' #here \\n mean a newline not a name\n        c:\\some\n        ame\n        >>>print r'c:\\some\\name' # note r before the quote\n        c:\\some\\name\n    ")]),n._v(" "),t("h3",[n._v("3. 列表")]),n._v(" "),t("p",[n._v("\n        列表可以写成中括号中的一列用逗号分隔的值,可以包含不同类型的元素，但是通常一个列表中的所有元素都拥有相同的类型。\n    ")]),n._v(" "),t("pre",[n._v("\n        >>>list = [1,2,3,4,5]\n\n        >>>list[0]\n        1\n\n        >>>list[-1]\n        5\n\n        >>>list[0,2] #不包含结束位置,且返回的是一个新列表\n        [1,2]\n\n        >>>list[0] = 2 #列表是可变的\n        >>>list\n        [2,2,3,4,5]\n\n        >>>list.appen(6)\n        >>>list\n        [2,2,3,4,5,6]\n\n        >>>list + [7,8,9]\n        [2,2,3,4,5,6,7,8,9]\n\n        >>>list[:] = [] #清空列表\n        >>>list\n        []\n\n        >>>list[1,2,3,4,5]\n        >>>list[2:4] = [0,0] #修改列表元素\n        >>>list\n        [1,2,0,0,5]\n\n        >>>list[2,4] = [] #删除列表元素\n        >>>list\n        [1,2,5]\n\n        >>>len(list) #返回列表长度\n        3\n    ")]),n._v(" "),t("h3",[n._v("4. 条件判断if")]),n._v(" "),t("pre",[n._v('\n        >>>x = input(\'place enter a number\')\n        if x > 0:\n            print("it\'s a positive number")\n        elif x = 0:\n            print("it\'s a zero")\n        else:\n            print("it\'s a negative number")\n    ')]),n._v(" "),t("p",[n._v("用缩进表示一个代码块(js用{}),一个缩进等于四个空格;注意每个条件后的冒号;所有条件没有括号")]),n._v(" "),t("h3",[n._v("5. 循环")]),n._v(" "),t("pre",[n._v("\n        >>> list  = [1,2,3,4,5]\n        >>> for l in list:\n                print(l+1)\n\n        >>> i = 0\n        >>> while i < len(list):\n                print(list[i] + 1)\n                i += 1 #python没有++/--运算\n    ")]),n._v(" "),t("h3",[n._v("6. range()函数")]),n._v(" "),t("p",[n._v("\n        如果你确实需要遍历一个数字序列，内置函数 range() 会派上用场。它会生成等差序列\n    ")]),n._v(" "),t("p",[n._v("\n        在很多方面由 range() 返回的对象的行为就像它是一个列表，但事实上它不是。它是一个对象，返回所需的序列连续项，当您遍历它，但它并不真的使列表中，从而节省了空间。\n    ")]),n._v(" "),t("p",[n._v("\n        我们把这样的对象称为可迭代的，也就是说，它们适合被一些函数和构造器所利用，这些函数和构造器期望可以从可迭代对象中获取连续的元素，直到没有新的元素为止\n    ")]),n._v(" "),t("pre",[n._v("\n        >>> for i in range(5):#一个参数表示从0到5\n                print(i)\n        0,1,2,3,4\n\n        >>> for i in range(5,10):#两个参数表示从5到10\n                print(i)\n        5,6,7,8,9\n\n        >>> for i in range(0,10,3):#三个参数表示从0到10,步长为3\n                print(i)\n        0,3,6,9\n\n        >>> list  = [1,2,3,4,5]\n        >>> for i in range(len(list))\n                list[i] = list[i] + 1\n                print(list)\n        [2,3,4,5,6]\n    ")]),n._v(" "),t("h3",[n._v("7. break、continue")]),n._v(" "),t("p",[n._v("跟js一样")]),n._v(" "),t("h3",[n._v("8. pass")]),n._v(" "),t("p",[n._v("\n        pass 语句什么也不做。它用于语法上必须要有一条语句，但程序什么也不需要做的场合\n    ")]),n._v(" "),t("pre",[n._v("\n        while True:\n            pass\n    ")]),n._v(" "),t("h3",[n._v("9. 定义函数def")]),n._v(" "),t("pre",[n._v("\n        def fib(n):\n            a, b = 0, 1\n            while a < n:\n                a, b = b, a + b\n            return a\n    ")]),n._v(" "),t("h3",[n._v("10. 定义默认参数函数")]),n._v(" "),t("pre",[n._v("\n        def say(name, words = \"hello\"):\n          print(name + \":\" + words)\n\n        say('jack')\n        >>>jack:hello #默认参数words为hello\n        say('jack,'hello world')\n        >>>jack:hello world #替换默认worlds值\n    ")]),n._v(" "),t("p",[t("span",{staticClass:"warnning"},[n._v("重要的警告")]),n._v("︰默认值是只计算一次。这在默认值是列表、字典或大部分类的实例等易变的对象的时候又有所不同。例如，下面的函数在后续调用过程中会累积传给它的参数：\n    ")]),n._v(" "),t("pre",[n._v("\n        def f(a, L=[]):\n            L.append(a)\n            return L\n\n        >>> print(f(1))\n        [1]\n        >>> print(f(2))\n        [1,2]\n        >>> print(f(3))\n        [1,2,3]\n    ")]),n._v(" "),t("p",[n._v("如果你不想默认值在随后的调用中共享，可以像这样编写函数:")]),n._v(" "),t("pre",[n._v("\n        def f(a, L=None):\n        if L is None:\n            L = []\n        L.append(a)\n        return L\n\n        >>> print(f(1))\n        [1]\n        >>> print(f(2))\n        [2]\n        >>> print(f(3))\n        [3]\n    ")]),n._v(" "),t("p",[n._v("但是如果是这样的情况,个人认为可以这么写:")]),n._v(" "),t("pre",[n._v("\n        def f(a):\n            L = []\n            L.append(a)\n            return L\n    ")])])}]}}});
//# sourceMappingURL=11.a303db04ee8fbb63ac88.js.map