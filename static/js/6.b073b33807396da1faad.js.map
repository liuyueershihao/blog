{"version":3,"sources":["webpack:///static/js/6.b073b33807396da1faad.js","webpack:///./src/views/articles/vue1.vue","webpack:///./src/views/articles/vue1.vue?735a"],"names":["webpackJsonp","41","module","exports","__webpack_require__","Component","90","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","_s","myMessage","staticRenderFns","attrs","href"],"mappings":"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","file":"static/js/6.b073b33807396da1faad.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 41:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(0)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(90),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 90:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"\\n      vue之组件通信\\n    \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"\\n      vue\\n    \")]), _vm._v(\" \"), _c('summary', [_vm._v(\"\\n      在vue业务开发中，我们经常需要将一个数据反正不同组件中使用，但是由于vue的组件作用域是孤立的，所以如何在各个组件间通信，就是我们不得不解决的一个问题。在vue中，组件间的通信主要分父子组件通信和非父子组件通信，下面我们详细来说。\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"1. 父子组件--父传子\")]), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child message=\\\"this is a message\\\"><\\\\/child>\\n\\n        // child.vue\\n        <\\\\div>\\n            {\\\\{message}}\\n        <\\\\/div>\\n\\n        props: ['message']\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们需要动态传递一个数据时，我们需要在子组件上使用v-bind\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child :message=\\\"data\\\"><\\\\/child>\\n\\n        data() {\\n            return {\\n                data: 'this is a message'\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div>\\n            {\\\\{message}}\\n        <\\\\/div>\\n\\n        props: ['message']\\n    \")]), _vm._v(\" \"), _c('h4', [_vm._v(\"camelCase及kabab-case\")]), _vm._v(\" \"), _c('p', [_vm._v(\"HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        Vue.component('child', {\\n            // camelCase in JavaScript\\n            props: ['myMessage'],\\n            template: '\"), _c('span', [_vm._v(_vm._s(_vm.myMessage))]), _vm._v(\"'\\n        })\\n\\n        \"), _vm._v(\"\\n        <\\\\child my-message=\\\"hello!\\\"><\\\\/child>\\n    \")]), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们希望父组件传递过来的值仅作为一个子组件的初始值的时候，我们可以在子组件中用data或者computed重新接收一遍\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        props: ['message'],\\n        data() {\\n            return {\\n                myMessage: this.message // 这个时候你可以任意修改myMessage\\n            }\\n        }\\n        // 或者直接作为计算属性\\n        props: ['message'],\\n        computed: {\\n            myMessage: function() {\\n                return this.message.toLowerCase()\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们想传递的不是一个数据，而是一个方法的时候，我们可以这么做\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child :myChild=\\\"myParent\\\"><\\\\/child>\\n\\n        methods: {\\n            myParent: function() {\\n                console.log('parent')\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div @click=\\\"myChild\\\">here is child.vue<\\\\/div>\\n\\n        props: ['myChild']\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"2. 父子组件--子传父\")]), _vm._v(\" \"), _c('p', [_vm._v(\"相对于父传子来说，可能子传父会相对复杂一些。在父传子中，我们用了一个props属性，可以让子组件接受父组件想传递的值。但是当在子传父的时候，我们需要使用自定义事件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"vue首先定义了两个东西: $on、$emit。使用 $on(eventName) 监听事件，使用 $emit(eventName) 触发事件。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // 我们需要将child.vue中的message输出到parent.vue中打印\\n\\n        // parent.vue\\n        <\\\\child v-on:myChild=\\\"myParent\\\"><\\\\/child>\\n\\n        methods: {\\n            myParent: function(message) {\\n                console.log(message)\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div @click=\\\"childEvent\\\"><\\\\/div>\\n        data() {\\n            return {\\n                message: 'this is a message'\\n            }\\n        }\\n        methods: {\\n            childEvent() {\\n                this.$emit('myChild', this.message)\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"3. 非父子组件通信\")]), _vm._v(\" \"), _c('p', [_vm._v(\"非父子组件间的通信很多时候也被叫做兄弟组件间通信，vue定义了一个event bus的东西，其实就是个发布订阅模式\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\div>\\n            <\\\\child1><\\\\/child1>\\n            <\\\\child2><\\\\/child2>\\n        <\\\\/div>\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"现在我们有两个子组件，分别是child1和child2，如果我想要在child2里面获取child1的数据该怎么做呢？\")]), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        <\\\\script>\\n            import Vue from 'vue'\\n            export default new Vue()\\n        <\\\\/script>\\n    \")]), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        <\\\\div @click=\\\"toChild2\\\"><\\\\/div> <--通过toChild2触发整个过程-->\\n\\n        import bus from 'xxx/bus.vue' // 先引入bus\\n\\n        components: { // 然后将bus注册为组件\\n            bus\\n        },\\n        data() {\\n            return {\\n                message: 'this is a message' // 需要传递的数据\\n            }\\n        },\\n        methods: {\\n            toChild2() {\\n                bus.$emit('passMessage', this.message) // $emit了一个叫做passMessage的方法，并为其传递了一个this.message的参数\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // child2.vue\\n        import bus from 'xxx/bus.vue'\\n\\n        components: {\\n            bus\\n        },\\n        create() {\\n            bus.$on('passMessage', (data) => { // 这里在实际应用中要注意this的指向\\n                console.log(data) // 输出 this is a message\\n            })\\n        }\\n    \")]), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _c('p', [_vm._v(\"关于vuex的使用，下次再说\")])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"当我们在一个组件中引入了另外一个组件时，就很容易的形成了父子组件的嵌套关系。现在如果我们在父组件中有一个message，我们想把这个message告诉子组件，让其也可以对其访问，我们可以用 \"), _c('a', {\n    attrs: {\n      \"href\": \"https://cn.vuejs.org/v2/guide/components.html#Prop\"\n    }\n  }, [_vm._v(\"props\")]), _vm._v(\" 来实现\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"warnning\"\n  }, [_vm._v(\"注意:\")]), _vm._v(\" 任何时候，我们都不应该在子组件中修改props\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"1.\")]), _vm._v(\"新建一个bus.vue，里面就这样写\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"2.\")]), _vm._v(\"我们需要把child1里面的数据先传给bus.vue\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"3. \")]), _vm._v(\"最后我们需要在child2.vue中去调取bus中的passMessage方法就可以了\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"用event bus确实能实现不同组件间的通信，但是当项目组件过于庞大，组件之间的通信就会变得过重难以管理。所以官方推荐，当项目变大的时候，我们应该选择使用 \"), _c('a', {\n    attrs: {\n      \"href\": \"https://vuex.vuejs.org/zh-cn/\"\n    }\n  }, [_vm._v(\"vuex\")]), _vm._v(\" ，毕竟veux设计出来的初衷就是为何更好的管理组件的状态\")])\n}]}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/6.b073b33807396da1faad.js","var Component = require(\"!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-edbe9adc\\\"}!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/selector?type=template&index=0!./vue1.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/articles/vue1.vue\n// module id = 41\n// module chunks = 6","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"\\n      vue之组件通信\\n    \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"\\n      vue\\n    \")]), _vm._v(\" \"), _c('summary', [_vm._v(\"\\n      在vue业务开发中，我们经常需要将一个数据反正不同组件中使用，但是由于vue的组件作用域是孤立的，所以如何在各个组件间通信，就是我们不得不解决的一个问题。在vue中，组件间的通信主要分父子组件通信和非父子组件通信，下面我们详细来说。\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"1. 父子组件--父传子\")]), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child message=\\\"this is a message\\\"><\\\\/child>\\n\\n        // child.vue\\n        <\\\\div>\\n            {\\\\{message}}\\n        <\\\\/div>\\n\\n        props: ['message']\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们需要动态传递一个数据时，我们需要在子组件上使用v-bind\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child :message=\\\"data\\\"><\\\\/child>\\n\\n        data() {\\n            return {\\n                data: 'this is a message'\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div>\\n            {\\\\{message}}\\n        <\\\\/div>\\n\\n        props: ['message']\\n    \")]), _vm._v(\" \"), _c('h4', [_vm._v(\"camelCase及kabab-case\")]), _vm._v(\" \"), _c('p', [_vm._v(\"HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        Vue.component('child', {\\n            // camelCase in JavaScript\\n            props: ['myMessage'],\\n            template: '\"), _c('span', [_vm._v(_vm._s(_vm.myMessage))]), _vm._v(\"'\\n        })\\n\\n        \"), _vm._v(\"\\n        <\\\\child my-message=\\\"hello!\\\"><\\\\/child>\\n    \")]), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们希望父组件传递过来的值仅作为一个子组件的初始值的时候，我们可以在子组件中用data或者computed重新接收一遍\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        props: ['message'],\\n        data() {\\n            return {\\n                myMessage: this.message // 这个时候你可以任意修改myMessage\\n            }\\n        }\\n        // 或者直接作为计算属性\\n        props: ['message'],\\n        computed: {\\n            myMessage: function() {\\n                return this.message.toLowerCase()\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果我们想传递的不是一个数据，而是一个方法的时候，我们可以这么做\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\child :myChild=\\\"myParent\\\"><\\\\/child>\\n\\n        methods: {\\n            myParent: function() {\\n                console.log('parent')\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div @click=\\\"myChild\\\">here is child.vue<\\\\/div>\\n\\n        props: ['myChild']\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"2. 父子组件--子传父\")]), _vm._v(\" \"), _c('p', [_vm._v(\"相对于父传子来说，可能子传父会相对复杂一些。在父传子中，我们用了一个props属性，可以让子组件接受父组件想传递的值。但是当在子传父的时候，我们需要使用自定义事件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"vue首先定义了两个东西: $on、$emit。使用 $on(eventName) 监听事件，使用 $emit(eventName) 触发事件。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // 我们需要将child.vue中的message输出到parent.vue中打印\\n\\n        // parent.vue\\n        <\\\\child v-on:myChild=\\\"myParent\\\"><\\\\/child>\\n\\n        methods: {\\n            myParent: function(message) {\\n                console.log(message)\\n            }\\n        }\\n\\n        // child.vue\\n        <\\\\div @click=\\\"childEvent\\\"><\\\\/div>\\n        data() {\\n            return {\\n                message: 'this is a message'\\n            }\\n        }\\n        methods: {\\n            childEvent() {\\n                this.$emit('myChild', this.message)\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"3. 非父子组件通信\")]), _vm._v(\" \"), _c('p', [_vm._v(\"非父子组件间的通信很多时候也被叫做兄弟组件间通信，vue定义了一个event bus的东西，其实就是个发布订阅模式\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // parent.vue\\n        <\\\\div>\\n            <\\\\child1><\\\\/child1>\\n            <\\\\child2><\\\\/child2>\\n        <\\\\/div>\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"现在我们有两个子组件，分别是child1和child2，如果我想要在child2里面获取child1的数据该怎么做呢？\")]), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        <\\\\script>\\n            import Vue from 'vue'\\n            export default new Vue()\\n        <\\\\/script>\\n    \")]), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        <\\\\div @click=\\\"toChild2\\\"><\\\\/div> <--通过toChild2触发整个过程-->\\n\\n        import bus from 'xxx/bus.vue' // 先引入bus\\n\\n        components: { // 然后将bus注册为组件\\n            bus\\n        },\\n        data() {\\n            return {\\n                message: 'this is a message' // 需要传递的数据\\n            }\\n        },\\n        methods: {\\n            toChild2() {\\n                bus.$emit('passMessage', this.message) // $emit了一个叫做passMessage的方法，并为其传递了一个this.message的参数\\n            }\\n        }\\n    \")]), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _c('pre', [_vm._v(\"\\n        // child2.vue\\n        import bus from 'xxx/bus.vue'\\n\\n        components: {\\n            bus\\n        },\\n        create() {\\n            bus.$on('passMessage', (data) => { // 这里在实际应用中要注意this的指向\\n                console.log(data) // 输出 this is a message\\n            })\\n        }\\n    \")]), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _c('p', [_vm._v(\"关于vuex的使用，下次再说\")])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"当我们在一个组件中引入了另外一个组件时，就很容易的形成了父子组件的嵌套关系。现在如果我们在父组件中有一个message，我们想把这个message告诉子组件，让其也可以对其访问，我们可以用 \"), _c('a', {\n    attrs: {\n      \"href\": \"https://cn.vuejs.org/v2/guide/components.html#Prop\"\n    }\n  }, [_vm._v(\"props\")]), _vm._v(\" 来实现\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"warnning\"\n  }, [_vm._v(\"注意:\")]), _vm._v(\" 任何时候，我们都不应该在子组件中修改props\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"1.\")]), _vm._v(\"新建一个bus.vue，里面就这样写\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"2.\")]), _vm._v(\"我们需要把child1里面的数据先传给bus.vue\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"3. \")]), _vm._v(\"最后我们需要在child2.vue中去调取bus中的passMessage方法就可以了\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"用event bus确实能实现不同组件间的通信，但是当项目组件过于庞大，组件之间的通信就会变得过重难以管理。所以官方推荐，当项目变大的时候，我们应该选择使用 \"), _c('a', {\n    attrs: {\n      \"href\": \"https://vuex.vuejs.org/zh-cn/\"\n    }\n  }, [_vm._v(\"vuex\")]), _vm._v(\" ，毕竟veux设计出来的初衷就是为何更好的管理组件的状态\")])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@11.3.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-edbe9adc\"}!./~/_vue-loader@11.3.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/articles/vue1.vue\n// module id = 90\n// module chunks = 6"],"sourceRoot":""}