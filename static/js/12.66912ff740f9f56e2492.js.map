{"version":3,"sources":["webpack:///static/js/12.66912ff740f9f56e2492.js","webpack:///./src/views/articles/new.vue","webpack:///./src/views/articles/new.vue?d825"],"names":["webpackJsonp","34","module","exports","__webpack_require__","Component","75","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,EAASC,GCHjC,GAAAC,GAAAD,EAAA,GAEA,KAEAA,EAAA,IAEA,KAEA,KAGAF,GAAAC,QAAAE,EAAAF,SDUMG,GACA,SAAUJ,EAAQC,GEtBxBD,EAAAC,SAAgBI,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,OAAAA,EAAA,OACAG,YAAA,UACGR,EAAAS,GAAA,iBAAAT,EAAAS,GAAA,KAAAJ,EAAA,OACHG,YAAA,QACGR,EAAAS,GAAA,gBAAAT,EAAAS,GAAA,KAAAJ,EAAA,WAAAL,EAAAS,GAAA,uFAAAT,EAAAS,GAAA,KAAAJ,EAAA,MAAAL,EAAAS,GAAA,SAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,2BAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAA,EAAA,UAAAL,EAAAS,GAAA,SAAAT,EAAAS,GAAA,4CAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAA,EAAA,UAAAL,EAAAS,GAAA,SAAAT,EAAAS,GAAA,uBAAAJ,EAAA,QAAAL,EAAAS,GAAA,UAAAT,EAAAS,GAAA,gBAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAA,EAAA,UAAAL,EAAAS,GAAA,SAAAT,EAAAS,GAAA,6BAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAA,EAAA,UAAAL,EAAAS,GAAA,SAAAT,EAAAS,GAAA,6BAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,WAAAT,EAAAS,GAAA,KAAAJ,EAAA,OAAAL,EAAAS,GAAA,gUAA63BT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,oCAAAT,EAAAS,GAAA,KAAAJ,EAAA,OAAAL,EAAAS,GAAA,0PAA6bT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,sDAAAJ,EAAA,QAAAL,EAAAS,GAAA,iBAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,gBAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,gBAAAT,EAAAS,GAAA,2CAAAT,EAAAS,GAAA,KAAAJ,EAAA,OAAAL,EAAAS,GAAA,gSAA8kBT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,mBAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,aAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,UAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,eAAAT,EAAAS,GAAA,oBAAAT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,WAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,cAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,WAAAT,EAAAS,GAAA,KAAAJ,EAAA,QAAAL,EAAAS,GAAA,UAAAT,EAAAS,GAAA,cAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,6CAAAT,EAAAS,GAAA,KAAAJ,EAAA,OAAAL,EAAAS,GAAA,sTAAq3BT,EAAAS,GAAA,KAAAJ,EAAA,KAAAL,EAAAS,GAAA,SAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,QAAAJ,EAAA,QAAAL,EAAAS,GAAA,YAAAT,EAAAS,GAAA,2DAAAJ,EAAA,QAAAL,EAAAS,GAAA,UAAAT,EAAAS,GAAA,uBAAAJ,EAAA,QAAAL,EAAAS,GAAA,UAAAT,EAAAS,GAAA","file":"static/js/12.66912ff740f9f56e2492.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(0)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(75),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 75:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"关于构造函数的一些细节\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"javascript\")]), _vm._v(\" \"), _c('summary', [_vm._v(\"相信大家对javascript中的构造函数都应该是耳熟能详了，在这里我将构造函数重新拎出来讲主要是讲一点大家平时不太常见的一个问题：如果构造函数带参数了会该怎么办\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"new\")]), _vm._v(\" \"), _c('p', [_vm._v(\"正常用 new 操作符调用构造函数的过程：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1. \")]), _vm._v(\" 创建一个新对象（应当注意的是：此时该对象并未被暴露，也更谈不上被谁引用了）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2. \")]), _vm._v(\" 将构造函数的作用域赋给新对象（因此 \"), _c('code', [_vm._v(\"this\")]), _vm._v(\" 指向了这个新对象）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3. \")]), _vm._v(\" 执行构造函数中的代码（为这个新对象添加属性）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"4. \")]), _vm._v(\" 返回新对象（此时对象被暴露，可以被外界引用）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"举个栗子:\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n\\r\\n        person.name // Allen\\r\\n        person.age // 18\\r\\n        person.job // student\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"以上是一个比较常见的正常栗子，但是如果我稍微变下，变成这样：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return this\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我在构造函数的内部加了一个返回值，要知道，我们一般碰到的构造函数都是不带返回值的。这时候再输出 \"), _c('code', [_vm._v(\"person.name\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"person.age\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"person.job\")]), _vm._v(\" 会是什么呢？由于这边我们返回值的特殊性，我们会发现，最后的结果还是一样。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return 1 // 如果我不想返回 this 我就想返回一个乱七八糟的东西，这时候会发生什么呢\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"经过测试发现，但我返回的值是 \"), _c('code', [_vm._v(\"number\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"string\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"boolean\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"null\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"undefined\")]), _vm._v(\" 等值的时候，结果是不会变的\")]), _vm._v(\" \"), _c('p', [_vm._v(\"但是但我返回 \"), _c('code', [_vm._v(\"object\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"function\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"array\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"date\")]), _vm._v(\" 等引用类型的时候，\"), _c('code', [_vm._v(\"person\")]), _vm._v(\"的结果就成为了该返回值，而其所有的属性和方法都没有在被实例对象所继承，而此时：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return {}\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n        console.log(person.constructor == Person) // false\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"就是说此时\"), _c('code', [_vm._v(\"person\")]), _vm._v(\"就不在是\"), _c('code', [_vm._v(\"Person\")]), _vm._v(\"的实例对象了。这个说明了构造函数是不能拥有引用类型的返回值，一旦有这种类型的返回值就不能再成为一个构造函数了（\"), _c('code', [_vm._v(\"this\")]), _vm._v(\"除外，估计构造函数内部本身就是返回的是\"), _c('code', [_vm._v(\"this\")]), _vm._v(\"对象）\")])])\n}]}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.66912ff740f9f56e2492.js","var Component = require(\"!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0ed06f6e\\\"}!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/selector?type=template&index=0!./new.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/articles/new.vue\n// module id = 34\n// module chunks = 12","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"关于构造函数的一些细节\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"javascript\")]), _vm._v(\" \"), _c('summary', [_vm._v(\"相信大家对javascript中的构造函数都应该是耳熟能详了，在这里我将构造函数重新拎出来讲主要是讲一点大家平时不太常见的一个问题：如果构造函数带参数了会该怎么办\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"new\")]), _vm._v(\" \"), _c('p', [_vm._v(\"正常用 new 操作符调用构造函数的过程：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1. \")]), _vm._v(\" 创建一个新对象（应当注意的是：此时该对象并未被暴露，也更谈不上被谁引用了）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2. \")]), _vm._v(\" 将构造函数的作用域赋给新对象（因此 \"), _c('code', [_vm._v(\"this\")]), _vm._v(\" 指向了这个新对象）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3. \")]), _vm._v(\" 执行构造函数中的代码（为这个新对象添加属性）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"4. \")]), _vm._v(\" 返回新对象（此时对象被暴露，可以被外界引用）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"举个栗子:\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n\\r\\n        person.name // Allen\\r\\n        person.age // 18\\r\\n        person.job // student\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"以上是一个比较常见的正常栗子，但是如果我稍微变下，变成这样：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return this\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我在构造函数的内部加了一个返回值，要知道，我们一般碰到的构造函数都是不带返回值的。这时候再输出 \"), _c('code', [_vm._v(\"person.name\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"person.age\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"person.job\")]), _vm._v(\" 会是什么呢？由于这边我们返回值的特殊性，我们会发现，最后的结果还是一样。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return 1 // 如果我不想返回 this 我就想返回一个乱七八糟的东西，这时候会发生什么呢\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"经过测试发现，但我返回的值是 \"), _c('code', [_vm._v(\"number\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"string\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"boolean\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"null\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"undefined\")]), _vm._v(\" 等值的时候，结果是不会变的\")]), _vm._v(\" \"), _c('p', [_vm._v(\"但是但我返回 \"), _c('code', [_vm._v(\"object\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"function\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"array\")]), _vm._v(\"/\"), _c('code', [_vm._v(\"date\")]), _vm._v(\" 等引用类型的时候，\"), _c('code', [_vm._v(\"person\")]), _vm._v(\"的结果就成为了该返回值，而其所有的属性和方法都没有在被实例对象所继承，而此时：\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        function Person(name, age, job) {\\r\\n            this.name = name\\r\\n            this.age = age\\r\\n            this.job = job\\r\\n            return {}\\r\\n        }\\r\\n        var person = new Person('Allen', 18, 'student')\\r\\n        console.log(person.constructor == Person) // false\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"就是说此时\"), _c('code', [_vm._v(\"person\")]), _vm._v(\"就不在是\"), _c('code', [_vm._v(\"Person\")]), _vm._v(\"的实例对象了。这个说明了构造函数是不能拥有引用类型的返回值，一旦有这种类型的返回值就不能再成为一个构造函数了（\"), _c('code', [_vm._v(\"this\")]), _vm._v(\"除外，估计构造函数内部本身就是返回的是\"), _c('code', [_vm._v(\"this\")]), _vm._v(\"对象）\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@11.3.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-0ed06f6e\"}!./~/_vue-loader@11.3.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/articles/new.vue\n// module id = 75\n// module chunks = 12"],"sourceRoot":""}