{"version":3,"sources":["webpack:///static/js/15.f1ddc5e332c3e2a91e8a.js","webpack:///./src/views/articles/ajax.vue","webpack:///./src/views/articles/ajax.vue?dacf"],"names":["webpackJsonp","31","module","exports","__webpack_require__","Component","86","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v"],"mappings":"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","file":"static/js/15.f1ddc5e332c3e2a91e8a.js","sourcesContent":["webpackJsonp([15],{\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(0)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(86),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 86:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"\\r\\n        浅谈ajax\\r\\n    \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"\\r\\n        javascript\\r\\n    \")]), _vm._v(\" \"), _c('summary', [_vm._v(\"Ajax 全称 Asynchronous Javascript and XML(异步的 Javascript 和 XML)。对于 Ajax，首先要明确的一点是，他不是一种新的语言，而是一种使用现有标准的新方法。它可以帮助我们不需要重载整个页面的情况下，向服务器发送请求。这能够大大提高我们的用户体验。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"1. ajax技术\")]), _vm._v(\" \"), _c('p', [_vm._v(\"我们说 ajax 不是一种新的语言，而是一种新的方法，新的技术。他是一种创建交互式网页应用的网页开发技术，他由一下几种技术组成:\")]), _vm._v(\" \"), _c('p', [_vm._v(\"1. 使用 css 和 XHtml 来表现\")]), _vm._v(\" \"), _c('p', [_vm._v(\"2. 使用 DOM 模型来交互和动态显示\")]), _vm._v(\" \"), _c('p', [_vm._v(\"3. 使用 XMLHttpRequest 来与服务器进行异步通信\")]), _vm._v(\" \"), _c('p', [_vm._v(\"4. 使用 Javascript 来绑定和调用\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"2. ajax原理\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ajax 的工作原理是相当于在用户和服务器之间加了一个中间层-- ajax 引擎，使得用户的操作能够得到异步化处理。这表现在不是用户所有操作都需要先去询问服务器，再从服务器获取数据，我们可以把一些简单的数据验证和数据操作等放在 ajax 层去实现，只有确定需要去服务器端获取数据的时候再由ajax发起请求即可。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ajax 的原理简单来说是通过一个叫做 XMLHttpRequest 的对象向服务器发送请求，然后从服务器获取数据后，调用 javascript 来操作 DOM，从而实现页面的刷新。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"其核心机制就是 XMLHttpRequest 对象\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"3. XMLHttpRequest\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1. 如何创建 XMLHttpRequest 对象\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr = new XMLHttpRequest()\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"IE5、IE6使用 ActiveX 对象\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"兼容创法\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr\\r\\n        if (XMLHttpRequest) {\\r\\n            xhr = new XMLHttpRequest()\\r\\n        } else {\\r\\n            xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n        }\\r\\n    \")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2. 向服务器发送 ajax 请求\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"XMLHttpRequest 对象内置有两个方法与服务器请求：open() 和 send()。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"open(method, url, async)。method：请求方式，get | post；url：文件在服务器上的文字；async：true（异步） | false（同步）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"open() 方法的 get 和 post 区别\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"1. get 方式一般发送数据的大小为 1kb（也跟浏览器不同而有差异），而 post 方式一般认为是没有大小限制的\")]), _vm._v(\" \"), _c('p', [_vm._v(\"2. get 方式会将参数跟在 URL 后面进行传递，而 post 则会将其作为 http 请求的的实体内容发送。这个差异在 ajax 请求中用户是不可见\")]), _vm._v(\" \"), _c('p', [_vm._v(\"3. get 获取的数据会被浏览器缓存起来，因而其他人可以从浏览器的历史纪录里面获取到这些数据，例如账号密码等，这就容易造成安全问题，而 post 相对来说就可以避免这些问题\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"get 请求\")])]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        // 一个简单的get请求\\r\\n        xhr.open('GET', 'test.asp', true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 由于get会缓存数据，所以有时候我们得到的数据可能不是从服务器上获取来的，\\r\\n        // 而是本地缓存的，所以如果要得到服务器的数据，我们需要向url添加一个唯一的ID，\\r\\n        // 来保证与缓存的区别\\r\\n        xhr.open('GET', 'test.asp?t=' + Meth.random(), true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 带参数的get请求\\r\\n        xhr.open('GET', 'test.asp?param1=' + param1 +'¶m2=' + param2, true)\\r\\n        xhr.send()\\r\\n    \")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"post 请求\")])]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        // 一个简单的post请求\\r\\n        xhr.open('POST', 'test.asp', true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 带参数的post请求，将参数放在 send() 方法中发送\\r\\n        xhr.open('POST', 'test.asp', true)\\r\\n        xhr.send(params)\\r\\n\\r\\n        // 设置请求头\\r\\n        xmlhttp.open(\\\"POST\\\",\\\"test.asp\\\",true);\\r\\n        xmlhttp.setRequestHeader(\\\"Content-type\\\",\\\"application/x-www-form-urlencoded\\\");\\r\\n        xmlhttp.send(params);\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"setRequestHeader(header, value)。向请求添加 http 头，header：规定头的名称，value：规定头的值\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3. 获取服务器的响应\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当我们向服务器发出请求后，我们需要知道服务器对我们的请求处理的怎么样了，他是接受了还是没接收？如果接受了，他是处理了还是没处理？如果处理了，他是成功了还是没成功？这时候，我们需要对我们发出去的 ajax 请求做一些监听，以便我们随时能够知道服务器的状态，并做出相应的处理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"XMLHttpRequest 给我们提供了三个重要的属性：onreadystatechange/readystate/status\")]), _vm._v(\" \"), _c('p', [_vm._v(\"onreadystatechange: 储存函数，每当readystate发生变化的时候会自动调用该函数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"readystate: 储存了 XMLHttpRequest 的所有状态，从0->4。0：请求初始化，1：链接已经建立，2：请求接受，3：请求处理中，4：请求已完成，响应已就绪\")]), _vm._v(\" \"), _c('p', [_vm._v(\"status: 状态码。常用： 200表示请求成功，404表示页面未找到\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        xhr.onreadystatechange = function() {\\r\\n            if (xhr.readystate === 4 && xhr.status === 200) {\\r\\n                // 如果来自服务器的响应并非 XML，请使用 responseText 属性。\\r\\n                console.log(xhr.responseText)\\r\\n\\r\\n                // 如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，\\r\\n                // 请使用 responseXML 属性：\\r\\n                console.log(xhr.responseXML)\\r\\n            }\\r\\n        }\\r\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"总结\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一次完整的 ajax 请求应该是这样的\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr\\r\\n        if (XMLHttpRequest) { // 创建 XMLHttpRequest 核心对象\\r\\n            xhr = new XMLHttpRequest()\\r\\n        } else {\\r\\n            xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n        }\\r\\n        // 建立一次Get请求（post类似）\\r\\n        xhr.open('GET', 'test.txt', true)\\r\\n        xhr.send()\\r\\n        // 监听XMLHttpRequest状态\\r\\n        xhr.onreadystatechange = function() {\\r\\n            if (readystate === 4 && status === 200) {\\r\\n                var res = xhr.responseText // 或者用xhr.responseXML\\r\\n                //其他处理...\\r\\n            }\\r\\n        }\\r\\n    \")])])\n}]}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/15.f1ddc5e332c3e2a91e8a.js","var Component = require(\"!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-8a4eca72\\\"}!../../../node_modules/_vue-loader@11.3.4@vue-loader/lib/selector?type=template&index=0!./ajax.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/articles/ajax.vue\n// module id = 31\n// module chunks = 15","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"title\"\n  }, [_vm._v(\"\\r\\n        浅谈ajax\\r\\n    \")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tag\"\n  }, [_vm._v(\"\\r\\n        javascript\\r\\n    \")]), _vm._v(\" \"), _c('summary', [_vm._v(\"Ajax 全称 Asynchronous Javascript and XML(异步的 Javascript 和 XML)。对于 Ajax，首先要明确的一点是，他不是一种新的语言，而是一种使用现有标准的新方法。它可以帮助我们不需要重载整个页面的情况下，向服务器发送请求。这能够大大提高我们的用户体验。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"1. ajax技术\")]), _vm._v(\" \"), _c('p', [_vm._v(\"我们说 ajax 不是一种新的语言，而是一种新的方法，新的技术。他是一种创建交互式网页应用的网页开发技术，他由一下几种技术组成:\")]), _vm._v(\" \"), _c('p', [_vm._v(\"1. 使用 css 和 XHtml 来表现\")]), _vm._v(\" \"), _c('p', [_vm._v(\"2. 使用 DOM 模型来交互和动态显示\")]), _vm._v(\" \"), _c('p', [_vm._v(\"3. 使用 XMLHttpRequest 来与服务器进行异步通信\")]), _vm._v(\" \"), _c('p', [_vm._v(\"4. 使用 Javascript 来绑定和调用\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"2. ajax原理\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ajax 的工作原理是相当于在用户和服务器之间加了一个中间层-- ajax 引擎，使得用户的操作能够得到异步化处理。这表现在不是用户所有操作都需要先去询问服务器，再从服务器获取数据，我们可以把一些简单的数据验证和数据操作等放在 ajax 层去实现，只有确定需要去服务器端获取数据的时候再由ajax发起请求即可。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ajax 的原理简单来说是通过一个叫做 XMLHttpRequest 的对象向服务器发送请求，然后从服务器获取数据后，调用 javascript 来操作 DOM，从而实现页面的刷新。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"其核心机制就是 XMLHttpRequest 对象\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"3. XMLHttpRequest\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1. 如何创建 XMLHttpRequest 对象\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr = new XMLHttpRequest()\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"IE5、IE6使用 ActiveX 对象\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"兼容创法\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr\\r\\n        if (XMLHttpRequest) {\\r\\n            xhr = new XMLHttpRequest()\\r\\n        } else {\\r\\n            xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n        }\\r\\n    \")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2. 向服务器发送 ajax 请求\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"XMLHttpRequest 对象内置有两个方法与服务器请求：open() 和 send()。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"open(method, url, async)。method：请求方式，get | post；url：文件在服务器上的文字；async：true（异步） | false（同步）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"open() 方法的 get 和 post 区别\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"1. get 方式一般发送数据的大小为 1kb（也跟浏览器不同而有差异），而 post 方式一般认为是没有大小限制的\")]), _vm._v(\" \"), _c('p', [_vm._v(\"2. get 方式会将参数跟在 URL 后面进行传递，而 post 则会将其作为 http 请求的的实体内容发送。这个差异在 ajax 请求中用户是不可见\")]), _vm._v(\" \"), _c('p', [_vm._v(\"3. get 获取的数据会被浏览器缓存起来，因而其他人可以从浏览器的历史纪录里面获取到这些数据，例如账号密码等，这就容易造成安全问题，而 post 相对来说就可以避免这些问题\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"get 请求\")])]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        // 一个简单的get请求\\r\\n        xhr.open('GET', 'test.asp', true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 由于get会缓存数据，所以有时候我们得到的数据可能不是从服务器上获取来的，\\r\\n        // 而是本地缓存的，所以如果要得到服务器的数据，我们需要向url添加一个唯一的ID，\\r\\n        // 来保证与缓存的区别\\r\\n        xhr.open('GET', 'test.asp?t=' + Meth.random(), true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 带参数的get请求\\r\\n        xhr.open('GET', 'test.asp?param1=' + param1 +'¶m2=' + param2, true)\\r\\n        xhr.send()\\r\\n    \")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"post 请求\")])]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        // 一个简单的post请求\\r\\n        xhr.open('POST', 'test.asp', true)\\r\\n        xhr.send()\\r\\n\\r\\n        // 带参数的post请求，将参数放在 send() 方法中发送\\r\\n        xhr.open('POST', 'test.asp', true)\\r\\n        xhr.send(params)\\r\\n\\r\\n        // 设置请求头\\r\\n        xmlhttp.open(\\\"POST\\\",\\\"test.asp\\\",true);\\r\\n        xmlhttp.setRequestHeader(\\\"Content-type\\\",\\\"application/x-www-form-urlencoded\\\");\\r\\n        xmlhttp.send(params);\\r\\n    \")]), _vm._v(\" \"), _c('p', [_vm._v(\"setRequestHeader(header, value)。向请求添加 http 头，header：规定头的名称，value：规定头的值\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3. 获取服务器的响应\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当我们向服务器发出请求后，我们需要知道服务器对我们的请求处理的怎么样了，他是接受了还是没接收？如果接受了，他是处理了还是没处理？如果处理了，他是成功了还是没成功？这时候，我们需要对我们发出去的 ajax 请求做一些监听，以便我们随时能够知道服务器的状态，并做出相应的处理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"XMLHttpRequest 给我们提供了三个重要的属性：onreadystatechange/readystate/status\")]), _vm._v(\" \"), _c('p', [_vm._v(\"onreadystatechange: 储存函数，每当readystate发生变化的时候会自动调用该函数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"readystate: 储存了 XMLHttpRequest 的所有状态，从0->4。0：请求初始化，1：链接已经建立，2：请求接受，3：请求处理中，4：请求已完成，响应已就绪\")]), _vm._v(\" \"), _c('p', [_vm._v(\"status: 状态码。常用： 200表示请求成功，404表示页面未找到\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        xhr.onreadystatechange = function() {\\r\\n            if (xhr.readystate === 4 && xhr.status === 200) {\\r\\n                // 如果来自服务器的响应并非 XML，请使用 responseText 属性。\\r\\n                console.log(xhr.responseText)\\r\\n\\r\\n                // 如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，\\r\\n                // 请使用 responseXML 属性：\\r\\n                console.log(xhr.responseXML)\\r\\n            }\\r\\n        }\\r\\n    \")]), _vm._v(\" \"), _c('h3', [_vm._v(\"总结\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一次完整的 ajax 请求应该是这样的\")]), _vm._v(\" \"), _c('pre', [_vm._v(\"\\r\\n        var xhr\\r\\n        if (XMLHttpRequest) { // 创建 XMLHttpRequest 核心对象\\r\\n            xhr = new XMLHttpRequest()\\r\\n        } else {\\r\\n            xhr = new ActiveXObject('Mircosoft.XMLHttp')\\r\\n        }\\r\\n        // 建立一次Get请求（post类似）\\r\\n        xhr.open('GET', 'test.txt', true)\\r\\n        xhr.send()\\r\\n        // 监听XMLHttpRequest状态\\r\\n        xhr.onreadystatechange = function() {\\r\\n            if (readystate === 4 && status === 200) {\\r\\n                var res = xhr.responseText // 或者用xhr.responseXML\\r\\n                //其他处理...\\r\\n            }\\r\\n        }\\r\\n    \")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@11.3.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-8a4eca72\"}!./~/_vue-loader@11.3.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/articles/ajax.vue\n// module id = 86\n// module chunks = 15"],"sourceRoot":""}